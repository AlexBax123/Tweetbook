//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace TweetbookApi
{
    public interface ITweetbookService
    {
        string BaseUrl { get; set; }
        bool ReadResponseAsString { get; set; }

        Task<PostResponseResponse> CreatePostAsync(CreatePostRequest body);
        Task<PostResponseResponse> CreatePostAsync(CreatePostRequest body, CancellationToken cancellationToken);
        Task DeletePostAsync(Guid postId);
        Task DeletePostAsync(Guid postId, CancellationToken cancellationToken);
        Task DeleteTagAsync(Guid tagId);
        Task DeleteTagAsync(Guid tagId, CancellationToken cancellationToken);
        Task<PostResponsePagedResponse> GetAllPostsAsync(int? pageNumber, int? pageSize);
        Task<PostResponsePagedResponse> GetAllPostsAsync(int? pageNumber, int? pageSize, CancellationToken cancellationToken);
        Task GetAllTagsAsync();
        Task GetAllTagsAsync(CancellationToken cancellationToken);
        Task<PostResponseResponse> GetPostAsync(Guid postId);
        Task<PostResponseResponse> GetPostAsync(Guid postId, CancellationToken cancellationToken);
        Task GetSecretAsync();
        Task GetSecretAsync(CancellationToken cancellationToken);
        Task<AuthSuccessResponse> LoginAsync(UserLoginRequest body);
        Task<AuthSuccessResponse> LoginAsync(UserLoginRequest body, CancellationToken cancellationToken);
        Task<MyAwesomeOptions> OptionsAsync();
        Task<MyAwesomeOptions> OptionsAsync(CancellationToken cancellationToken);
        Task<AuthSuccessResponse> RefreshAsync(RefreshTokenRequest body);
        Task<AuthSuccessResponse> RefreshAsync(RefreshTokenRequest body, CancellationToken cancellationToken);
        Task<AuthSuccessResponse> RegisterAsync(UserRegistrationRequest body);
        Task<AuthSuccessResponse> RegisterAsync(UserRegistrationRequest body, CancellationToken cancellationToken);
        Task<PostResponseResponse> UpdatePostAsync(Guid postId, UpdatePostRequest body);
        Task<PostResponseResponse> UpdatePostAsync(Guid postId, UpdatePostRequest body, CancellationToken cancellationToken);
    }
}